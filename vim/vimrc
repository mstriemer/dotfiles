set mouse=
set shell=bash
set ruler
set hidden
syntax on
" let g:solarized_termcolors=256
colorscheme solarized
set background=light
set t_Co=256 " Explicitly tell vim that the terminal supports 256 colours

" Set encoding
set encoding=utf-8

" Whitespace stuff
set nowrap
set tabstop=4
set shiftwidth=4
set softtabstop=4
set expandtab
set autoindent
set smarttab
set copyindent
set pastetoggle=<F2> " Disable auto-indenting magic for pasting
set shiftround
set list listchars=tab:→\ ,trail:·

" Searching
set hlsearch
set incsearch
set ignorecase
set smartcase

" No arrow keys!
map <Left> :echo "STOP IT!"<cr>
map <Right> :echo "STOP IT!"<cr>
map <Down> :echo "STOP IT!"<cr>
map <Up> :echo "STOP IT!"<cr>

" Tab completion
set wildmode=list:longest,list:full
set wildignore+=*.o,*.obj,.git,*.rbc,*.class,.svn,vendor/gems/*,*.pyc,env-*/*,*.jpg,*.jpeg,*.gif,*.png,*.zip,*/coverage,node_modules,cache,*.styl.css,*.orig,bower_components

" Status bar
set laststatus=2

" Highlight the current line
autocmd WinEnter * setlocal cursorline
autocmd WinLeave * setlocal nocursorline
autocmd BufRead,BufNewFile * setlocal cursorline

" Set .jsm as javascript
au BufNewFile,BufRead *.jsm set filetype=javascript

" Set less filetype
au BufNewFile,BufRead *.less set filetype=less

" Thorfile, Rakefile, Vagrantfile and Gemfile are Ruby
au BufRead,BufNewFile {Gemfile,Rakefile,Vagrantfile,Thorfile,config.ru} set ft=ruby

" Set pico8 fieltype to lua
au BufRead,BufNewFile *.p8 set ft=lua

set backspace=indent,eol,start " allow backspacing over everything in insert mode
set autoread

" Yank to the OS X clipboard
noremap <leader>y "*y
noremap <leader>Y "*Y
noremap <leader>p "*p
noremap <leader>P "*P

" Directories for swp files
set backupdir=~/.dotfiles/vim/backup
set directory=~/.dotfiles/vim/backup

" Show (partial) command in the status line
set showcmd

imap <C-l> <Space>=><Space>
nmap <C-h> <C-w>h
nmap <C-j> <C-w>j
nmap <C-k> <C-w>k
nmap <C-l> <C-w>l

" Clear search
nmap <silent> <cr> :nohlsearch<CR>

" Vimrc management
nnoremap <leader>rs :source ~/.vimrc<CR>
nnoremap <leader>rt :tabnew ~/.dotfiles/vim/vimrc<CR>
nnoremap <leader>re :e ~/.dotfiles/vim/vimrc<CR>
nnoremap <leader>rd :e ~/.dotfiles/vim/ <CR>

map ,, <C-^>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" RUNNING TESTS
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
map <leader>t :call RunTestFile()<cr>
map <leader>T :call RunNearestTest()<cr>
" map <leader>a :call RunTests('')<cr>
" map <leader>c :w\|:!script/features<cr>
" map <leader>w :w\|:!script/features --profile wip<cr>

function! RunTestFile(...)
    if a:0
        let command_suffix = a:1
    else
        let command_suffix = ""
    endif

    " Run the tests for the previously-marked file.
    let in_test_file = match(expand("%"), '\(.feature\|_spec.rb\)$') != -1
    if in_test_file
        call SetTestFile()
    elseif !exists("t:grb_test_file")
        return
    end
    call RunTests(t:grb_test_file . command_suffix)
endfunction

function! RunNearestTest()
    let spec_line_number = line('.')
    call RunTestFile(":" . spec_line_number . " -b")
endfunction

function! SetTestFile()
    " Set the spec file that tests will be run for.
    let t:grb_test_file=@%
endfunction

function! RunTests(filename)
    " Write the file and run tests for the given filename
    :w
    :silent !echo;echo;echo;echo;echo;echo;echo;echo;echo;echo
    :silent !echo;echo;echo;echo;echo;echo;echo;echo;echo;echo
    :silent !echo;echo;echo;echo;echo;echo;echo;echo;echo;echo
    :silent !echo;echo;echo;echo;echo;echo;echo;echo;echo;echo
    :silent !echo;echo;echo;echo;echo;echo;echo;echo;echo;echo
    :silent !echo;echo;echo;echo;echo;echo;echo;echo;echo;echo
    if match(a:filename, '\.feature$') != -1
        exec ":!script/features " . a:filename
    else
        if filereadable("script/test")
            exec ":!script/test " . a:filename
        elseif filereadable("Gemfile")
            exec ":!bundle exec rspec --color " . a:filename
        else
            exec ":!rspec --color " . a:filename
        end
    end
endfunction
